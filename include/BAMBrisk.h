

#ifndef _BAMBRISK_H_
#define _BAMBRISK_H_

#include <opencv2/features2d/features2d.hpp>
#include <opencv2/core/core.hpp>

static const int _pairs[512] = {6, 15, 36, 55, 21, 3, 47, 28, 10, 45, 57, 160, 95, 110, 219, 241, 69, 142, 179, 287, 105, 136, 231, 276, 120, 253, 171, 78, 288, 190, 91, 153, 210, 300, 81, 126, 198, 264, 82, 125, 199, 263, 312, 338, 766, 365, 727, 393, 689, 422, 652, 143, 68, 278, 178, 452, 616, 483, 581, 515, 547, 96, 109, 220, 240, 514, 548, 4, 7, 29, 37, 2, 11, 22, 46, 1, 16, 482, 582, 58, 66, 159, 161, 406, 741, 465, 666, 351, 767, 561, 528, 595, 435, 703, 378, 780, 496, 630, 451, 617, 421, 653, 392, 690, 94, 111, 218, 242, 1540, 1275, 1035, 861, 1752, 1081, 1326, 1596, 903, 990, 1128, 1225, 1378, 1485, 1653, 1770, 946, 1176, 1431, 1711, 485, 188, 640, 168, 30, 1018, 79, 1453, 150, 366, 1099, 216, 42, 367, 251, 1415, 744, 976, 834, 618, 113, 117, 207, 931, 1737, 917, 137, 144, 232, 123, 1398, 975, 252, 104, 504, 1468, 806, 262, 571, 655, 350, 381, 25, 1145, 40, 1098, 1007, 629, 533, 34, 138, 728, 135, 1578, 705, 313, 545, 676, 77, 704, 156, 674, 890, 9, 291, 17, 805, 668, 1294, 330, 638, 141, 283, 86, 549, 355, 158, 1564, 442, 175, 32, 1097, 1064, 64, 743, 873, 1508, 407, 450, 484, 930, 215, 1146, 1750, 1308, 254, 1245, 129, 473, 716, 1635, 1346, 1507, 960, 412, 568, 439, 605, 217, 742, 481, 820, 151, 394, 395, 14, 133, 234, 233, 534, 310, 423, 1051, 1736, 1209, 27, 80, 1296, 603, 503, 436, 974, 259, 1207, 362, 326, 193, 230, 107, 667, 1050, 729, 286, 527, 1634, 88, 102, 201, 121, 71, 289, 1652, 1595, 1414, 405, 874, 73, 714, 410, 550, 1506, 18, 1310, 237, 256, 329, 38, 1258, 501, 1619, 118, 19, 512, 962, 258, 187, 1065, 353, 65, 195, 932, 172, 60, 302, 420, 1243, 1400, 63, 173, 314, 1521, 1735, 250, 1175, 1469, 529, 170, 1195, 181, 212, 1257, 26, 441, 1006, 101, 48, 650, 1399, 274, 39, 1161, 470, 228, 1691, 916, 750, 364, 740, 1413, 290, 1193, 112, 127, 182, 779, 1621, 1295, 108, 1127, 1210, 59, 84, 1208, 192, 706, 583, 383, 768, 12, 281, 196, 847, 1523, 222, 61, 273, 1005, 1562, 239, 570, 1679, 1452, 85, 449, 1019, 678, 267, 712, 639, 43, 1693, 637, 8, 764, 471, 751, 833, 888, 614, 177, 495, 49, 235, 257, 298, 376, 807, 24, 340, 299, 1563, 1309, 517, 1633, 266, 1579, 75, 536, 419, 677, 209, 382, 846, 106, 122, 1377, 67, 1677, 162, 229, 1577, 604, 411, 454, 1539, 579, 131, 594, 562, 918, 1347, 875, 337, 176, 615, 933, 261, 114, 1004, 130, 413, 356, 20, 480, 98, 35, 297, 832, 53, 51, 74, 945, 304, 535, 50, 377, 596, 889, 99, 83, 1522, 989, 189, 765, 497, 1466, 255, 128, 1345, 243, 584, 134, 409, 1665, 169, 1159, 860, 961, 164, 1361, 902, 793, 97, 139, 238, 702, 438, 1620, 336, 277, 13, 384, 505, 1509, 848, 72, 1080, 1021, 284, 1112, 1034, 119, 380, 1723};

namespace cv{

class CV_EXPORTS BAMBriskDescriptorExtractor : public cv::DescriptorExtractor{
	public:


		BAMBriskDescriptorExtractor(int dsize = 512, bool rotationInvariant = true, bool scaleInvariant = true, float patternScale = 1.0f);

		virtual ~BAMBriskDescriptorExtractor();

		int descriptorSize() const;
		int descriptorType() const;

		bool _rotationInvariance;
		bool _scaleInvariance;

		// this is the subclass keypoint computation implementation: (not meant to be public - hacked)
		virtual void computeImpl(const Mat& image, std::vector<KeyPoint>& keypoints,
				Mat& descriptors) const;

		//opencv 2.1{
		virtual void compute(const Mat& image, std::vector<KeyPoint>& keypoints, Mat& descriptors) const{
			computeImpl(image,keypoints,descriptors);
		}

	private:

		Ptr<DescriptorExtractor> _ext;

	};

}


#endif //_BAMBRISK_H_
